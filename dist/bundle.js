!function(e){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,n){if(!$[e]||!w[e])return;for(var t in w[e]=!1,n)Object.prototype.hasOwnProperty.call(n,t)&&(h[t]=n[t]);0==--b&&0===y&&L()}(e,t),n&&n(e,t)};var t,r=!0,o="7981ee40695efa32b691",i={},s=[],a=[];function c(e){var n=H[e];if(!n)return M;var r=function(r){return n.hot.active?(H[r]?-1===H[r].parents.indexOf(e)&&H[r].parents.push(e):(s=[e],t=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),M(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return M[e]},set:function(n){M[e]=n}}};for(var i in M)Object.prototype.hasOwnProperty.call(M,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===u&&p("prepare"),y++,M.e(e).then(n,(function(e){throw n(),e}));function n(){y--,"prepare"===u&&(g[e]||S(e),0===y&&0===b&&L())}},r.t=function(e,n){return 1&n&&(e=r(e)),M.t(e,-2&n)},r}function d(n){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:t!==n,active:!0,accept:function(e,n){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._acceptedDependencies[e[t]]=n||function(){};else r._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._declinedDependencies[e[n]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=r._disposeHandlers.indexOf(e);n>=0&&r._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":(h={})[n]=e[n],p("ready");break;case"ready":T(n);break;case"prepare":case"check":case"dispose":case"apply":(v=v||[]).push(n)}},check:x,apply:E,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var n=l.indexOf(e);n>=0&&l.splice(n,1)},data:i[n]};return t=void 0,r}var l=[],u="idle";function p(e){u=e;for(var n=0;n<l.length;n++)l[n].call(null,e)}var f,h,m,v,b=0,y=0,g={},w={},$={};function k(e){return+e+""===e?+e:e}function x(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(n=1e4,n=n||1e4,new Promise((function(e,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var r=new XMLHttpRequest,o=M.p+"a2807ce-wps-hmr.json";r.open("GET",o,!0),r.timeout=n,r.send(null)}catch(e){return t(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)t(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)t(new Error("Manifest request to "+o+" failed."));else{try{var n=JSON.parse(r.responseText)}catch(e){return void t(e)}e(n)}}}))).then((function(e){if(!e)return p(O()?"ready":"idle"),null;w={},g={},$=e.c,m=e.h,p("prepare");var n=new Promise((function(e,n){f={resolve:e,reject:n}}));h={};return S(0),"prepare"===u&&0===y&&0===b&&L(),n}));var n}function S(e){$[e]?(w[e]=!0,b++,function(e){var n=document.createElement("script");n.charset="utf-8",n.src=M.p+"a2807ce-"+e+"-wps-hmr.js",document.head.appendChild(n)}(e)):g[e]=!0}function L(){p("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then((function(){return E(r)})).then((function(n){e.resolve(n)}),(function(n){e.reject(n)}));else{var n=[];for(var t in h)Object.prototype.hasOwnProperty.call(h,t)&&n.push(k(t));e.resolve(n)}}function E(n){if("ready"!==u)throw new Error("apply() is only allowed in ready status");return function n(r){var a,c,d,l,u;function f(e){for(var n=[e],t={},r=n.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,s=o.chain;if((l=H[i])&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(l.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<l.parents.length;a++){var c=l.parents[a],d=H[c];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([c]),moduleId:i,parentId:c};-1===n.indexOf(c)&&(d.hot._acceptedDependencies[i]?(t[c]||(t[c]=[]),b(t[c],[i])):(delete t[c],n.push(c),r.push({chain:s.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function b(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}O();var y={},g=[],w={},x=function(){console.warn("[HMR] unexpected require("+L.moduleId+") to disposed module")};for(var S in h)if(Object.prototype.hasOwnProperty.call(h,S)){var L;u=k(S),L=h[S]?f(u):{type:"disposed",moduleId:S};var E=!1,T=!1,_=!1,j="";switch(L.chain&&(j="\nUpdate propagation: "+L.chain.join(" -> ")),L.type){case"self-declined":r.onDeclined&&r.onDeclined(L),r.ignoreDeclined||(E=new Error("Aborted because of self decline: "+L.moduleId+j));break;case"declined":r.onDeclined&&r.onDeclined(L),r.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+L.moduleId+" in "+L.parentId+j));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(L),r.ignoreUnaccepted||(E=new Error("Aborted because "+u+" is not accepted"+j));break;case"accepted":r.onAccepted&&r.onAccepted(L),T=!0;break;case"disposed":r.onDisposed&&r.onDisposed(L),_=!0;break;default:throw new Error("Unexception type "+L.type)}if(E)return p("abort"),Promise.reject(E);if(T)for(u in w[u]=h[u],b(g,L.outdatedModules),L.outdatedDependencies)Object.prototype.hasOwnProperty.call(L.outdatedDependencies,u)&&(y[u]||(y[u]=[]),b(y[u],L.outdatedDependencies[u]));_&&(b(g,[L.moduleId]),w[u]=x)}var I,C=[];for(c=0;c<g.length;c++)u=g[c],H[u]&&H[u].hot._selfAccepted&&w[u]!==x&&!H[u].hot._selfInvalidated&&C.push({module:u,parents:H[u].parents.slice(),errorHandler:H[u].hot._selfAccepted});p("dispose"),Object.keys($).forEach((function(e){!1===$[e]&&function(e){delete installedChunks[e]}(e)}));var D,P,q=g.slice();for(;q.length>0;)if(u=q.pop(),l=H[u]){var A={},N=l.hot._disposeHandlers;for(d=0;d<N.length;d++)(a=N[d])(A);for(i[u]=A,l.hot.active=!1,delete H[u],delete y[u],d=0;d<l.children.length;d++){var R=H[l.children[d]];R&&((I=R.parents.indexOf(u))>=0&&R.parents.splice(I,1))}}for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(l=H[u]))for(P=y[u],d=0;d<P.length;d++)D=P[d],(I=l.children.indexOf(D))>=0&&l.children.splice(I,1);p("apply"),void 0!==m&&(o=m,m=void 0);for(u in h=void 0,w)Object.prototype.hasOwnProperty.call(w,u)&&(e[u]=w[u]);var U=null;for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(l=H[u])){P=y[u];var z=[];for(c=0;c<P.length;c++)if(D=P[c],a=l.hot._acceptedDependencies[D]){if(-1!==z.indexOf(a))continue;z.push(a)}for(c=0;c<z.length;c++){a=z[c];try{a(P)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:u,dependencyId:P[c],error:e}),r.ignoreErrored||U||(U=e)}}}for(c=0;c<C.length;c++){var B=C[c];u=B.module,s=B.parents,t=u;try{M(u)}catch(e){if("function"==typeof B.errorHandler)try{B.errorHandler(e)}catch(n){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),r.ignoreErrored||U||(U=n),U||(U=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:u,error:e}),r.ignoreErrored||U||(U=e)}}if(U)return p("fail"),Promise.reject(U);if(v)return n(r).then((function(e){return g.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e}));return p("idle"),new Promise((function(e){e(g)}))}(n=n||{})}function O(){if(v)return h||(h={}),v.forEach(T),v=void 0,!0}function T(n){Object.prototype.hasOwnProperty.call(h,n)||(h[n]=e[n])}var H={};function M(n){if(H[n])return H[n].exports;var t=H[n]={i:n,l:!1,exports:{},hot:d(n),parents:(a=s,s=[],a),children:[]};return e[n].call(t.exports,t,t.exports,c(n)),t.l=!0,t.exports}M.m=e,M.c=H,M.d=function(e,n,t){M.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},M.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},M.t=function(e,n){if(1&n&&(e=M(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(M.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)M.d(t,r,function(n){return e[n]}.bind(null,r));return t},M.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return M.d(n,"a",n),n},M.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},M.p="",M.h=function(){return o},c(3)(M.s=3)}([function(e,n){const{error:t,info:r,warn:o}=console,i={error:t.bind(console,"⬡ wps:"),info:r.bind(console,"⬡ wps:"),refresh:"Please refresh the page",warn:o.bind(console,"⬡ wps:")},s=()=>{},a={error:s,info:s,warn:s};e.exports=()=>window.webpackPluginServe.silent?a:i},function(e,n,t){(n=t(6)(!1)).push([e.i,"*{margin:0;padding:0}body{height:100vh;background:#111;display:grid;place-items:center}.screen{font-family:Modak, sans-serif;font-size:6em;color:#f06d06;background:none;appearance:none;border:none;text-align:center}#timer{color:white;font-size:4rem}\n",""]),e.exports=n},function(e,n){e.exports={addCss:e=>{const n=document.createElement("style");n.type="text/css",e.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e)),document.head.appendChild(n)},addHtml:(e,n)=>{const t=document.createElement("div"),r=[];for(t.innerHTML=e.trim();t.firstChild;)r.push((n||document.body).appendChild(t.firstChild));return r},socketMessage:(e,n)=>{e.addEventListener("message",e=>{const{action:t,data:r={}}=JSON.parse(e.data);n(t,r)})}}},function(e,n,t){t(14),e.exports=t(7)},function(e,n,t){var r=t(5),o=t(1);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},s=r(o,i);if(!o.locals||e.hot.invalidate){var a=o.locals;e.hot.accept(1,(function(){"string"==typeof(o=(o=t(1)).__esModule?o.default:o)&&(o=[[e.i,o,""]]),function(e,n){if(!e&&n||e&&!n)return!1;var t;for(t in e)if(e[t]!==n[t])return!1;for(t in n)if(!e[t])return!1;return!0}(a,o.locals)?(a=o.locals,s(o)):e.hot.invalidate()}))}e.hot.dispose((function(){s()})),e.exports=o.locals||{}},function(e,n,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),s=[];function a(e){for(var n=-1,t=0;t<s.length;t++)if(s[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],o=0;o<e.length;o++){var i=e[o],c=n.base?i[0]+n.base:i[0],d=t[c]||0,l="".concat(c," ").concat(d);t[c]=d+1;var u=a(l),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(s[u].references++,s[u].updater(p)):s.push({identifier:l,updater:v(p,n),references:1}),r.push(l)}return r}function d(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var s=i(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}return n}var l,u=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function p(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(n,o);else{var i=document.createTextNode(o),s=e.childNodes;s[n]&&e.removeChild(s[n]),s.length?e.insertBefore(i,s[n]):e.appendChild(i)}}function f(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,n){var t,r,o;if(n.singleton){var i=m++;t=h||(h=d(n)),r=p.bind(null,t,i,!1),o=p.bind(null,t,i,!0)}else t=d(n),r=f.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=a(t[r]);s[o].references--}for(var i=c(e,n),d=0;d<t.length;d++){var l=a(t[d]);0===s[l].references&&(s[l].updater(),s.splice(l,1))}t=i}}}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}var s,a,c;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},function(e,n,t){(()=>{const{run:e}=t(8);let n,r="<unknown>";try{n={compress:null,headers:null,historyFallback:!1,hmr:!0,host:null,liveReload:!1,log:{level:"info",prefix:{template:"{{level}}"},name:"webpack-plugin-serve"},open:!1,port:55555,progress:!0,ramdisk:!1,secure:!1,static:"dist",status:!0,address:"[::]:55555",compilerName:null,wpsId:"a2807ce"}}catch(e){const{log:n}=t(0);n.error("The entry for webpack-plugin-serve was included in your build, but it does not appear that the plugin was. Please check your configuration.")}try{r=t.h()}catch(e){}e(r,n)})()},function(e,n,t){e.exports={run:(e,n)=>{const{address:r,client:o={},progress:i,secure:s,status:a}=n;n.firstInstance=!window.webpackPluginServe,window.webpackPluginServe=window.webpackPluginServe||{compilers:{}},window.webpackPluginServe.silent=!!o.silent;const{ClientSocket:c}=t(9),{replace:d}=t(10),{error:l,info:u,warn:p}=t(0)(),f=new c(o,`${s?"wss":"ws"}://${o.address||r}/wps`),{compilerName:h}=n;if(window.webpackPluginServe.compilers[h]={},window.addEventListener("beforeunload",()=>f.close()),f.addEventListener("message",t=>{const{action:r,data:o={}}=JSON.parse(t.data),{errors:i,hash:s="<?>",warnings:a}=o||{},c=s.slice(0,7),f=n.compilerName?`(Compiler: ${n.compilerName}) `:"",m=window.webpackPluginServe.compilers[h],{wpsId:v}=o;switch(r){case"build":m.done=!1;break;case"connected":u("WebSocket connected "+f);break;case"done":m.done=!0;break;case"problems":o.errors.length&&l(`${f}Build ${c} produced errors:\n`,i),o.warnings.length&&p(`${f}Build ${c} produced warnings:\n`,a);break;case"reload":window.location.reload();break;case"replace":v&&v===n.wpsId&&d(e,s)}}),n.firstInstance){if("minimal"===i){const{init:e}=t(11);e(n,f)}else if(i){const{init:e}=t(12);e(n,f)}if(a){const{init:e}=t(13);e(n,f)}u("Hot Module Replacement is active"),n.liveReload&&u("Live Reload taking precedence over Hot Module Replacement")}}}},function(e,n,t){const{error:r,refresh:o,warn:i}=t(0)(),s=[1008,1011];e.exports={ClientSocket:class{constructor(e,...n){this.args=n,this.attempts=0,this.eventHandlers=[],this.options=e,this.retrying=!1,this.connect()}addEventListener(...e){this.eventHandlers.push(e),this.socket.addEventListener(...e)}close(){this.socket.close()}connect(){if(this.socket&&delete this.socket,this.connecting=!0,this.socket=new WebSocket(...this.args),this.options.retry?this.socket.addEventListener("close",e=>{s.includes(e.code)||(this.retrying||i("The WebSocket was closed and will attempt to reconnect"),this.reconnect())}):this.socket.onclose=()=>i("The client WebSocket was closed. "+o),this.socket.addEventListener("open",()=>{this.attempts=0,this.retrying=!1}),this.eventHandlers.length)for(const[e,n]of this.eventHandlers)this.socket.addEventListener(e,n)}reconnect(){if(this.attempts+=1,this.retrying=!0,this.attempts>10)return r("The WebSocket could not be reconnected. "+o),void(this.retrying=!1);const e=1e3*this.attempts**2;setTimeout(()=>this.connect(this.args),e)}removeEventListener(...e){const[,n]=e;this.eventHandlers=this.eventHandlers.filter(([,e])=>e===n),this.socket.removeEventListener(...e)}}}},function(e,n,t){const{error:r,info:o,refresh:i,warn:s}=t(0)();let a=!0;const c={onUnaccepted(e){s("Change in unaccepted module(s):\n",e),s(e)},onDeclined(e){s("Change in declined module(s):\n",e)},onErrored(e){r("Error in module(s):\n",e)}};e.exports={replace:async(n,t)=>{const{apply:r,check:d,status:l}=e.hot;if(t&&(a=t.includes(n)),!a){const e=l();if("abort"===e||"fail"===e)return void s(`An HMR update was triggered, but ${e}ed. ${i}`);let n;try{n=await d(!1)}catch(e){return}if(!n)return void s("No modules found for replacement. "+i);n=await r(c),n&&(a=!0,o(`Build ${t.slice(0,7)} replaced:\n`,n))}}}},function(e,n,t){const{addCss:r,addHtml:o}=t(2),i="wps-progress-minimal",s=`\n<div id="${i}" class="${i}-hidden">\n  <div id="${i}-bar"></div>\n</div>\n`,a=`\n#${i} {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 4px;\n  width: 100vw;\n  z-index: 2147483645;\n}\n\n#${i}-bar {\n  width: 0%;\n  height: 4px;\n  background-color: rgb(186, 223, 172);\n  transition: width 1s ease-in-out;\n}\n\n.${i}-hidden{\n  display: none;\n}\n`,c=e=>{document.querySelector(`#${i}-bar`).style.width=e+"%"};e.exports={init:(e,n)=>{e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{r(a),o(s)}),n.addEventListener("message",e=>{const{action:n,data:t}=JSON.parse(e.data);if("progress"!==n)return;const r=Math.floor(100*t.percent),o=document.querySelector("#"+i);o.classList.remove(i+"-hidden"),1===t.percent&&setTimeout(()=>(e=>{e.classList.add(i+"-hidden"),setTimeout(()=>c(0),1e3)})(o),5e3),c(r)})}}},function(e,n,t){const{addCss:r,addHtml:o}=t(2),i="wps-progress",s=`\n@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700');\n\n#${i}{\n  width: 200px;\n  height: 200px;\n  position: absolute;\n  right: 5%;\n  top: 5%;\n  transition: opacity .25s ease-in-out;\n  z-index: 2147483645;\n}\n\n#${i}-bg {\n  fill: #282d35;\n}\n\n#${i}-fill {\n  fill: rgba(0, 0, 0, 0);\n  stroke: rgb(186, 223, 172);\n  stroke-dasharray: 219.99078369140625;\n  stroke-dashoffset: -219.99078369140625;\n  stroke-width: 10;\n  transform: rotate(90deg)translate(0px, -80px);\n  transition: stroke-dashoffset 1s;\n}\n\n#${i}-percent {\n  font-family: 'Open Sans';\n  font-size: 18px;\n  fill: #ffffff;\n}\n\n#${i}-percent-value {\n  dominant-baseline: middle;\n  text-anchor: middle;\n}\n\n#${i}-percent-super {\n  fill: #bdc3c7;\n  font-size: .45em;\n  baseline-shift: 10%;\n}\n\n.${i}-noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: default;\n}\n\n@keyframes ${i}-hidden-display {\n\t0% {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t\t-webkit-transform: scale(1);\n\t}\n\t99% {\n\t\tdisplay: inline-flex;\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t\t-webkit-transform: scale(0);\n\t}\n\t100% {\n\t\tdisplay: none;\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t\t-webkit-transform: scale(0);\n\t}\n}\n\n.${i}-hidden {\n  animation: ${i}-hidden-display .3s;\n  animation-fill-mode:forwards;\n  display: inline-flex;\n}\n\n.${i}-hidden-onload {\n  display: none;\n}\n`,a=`\n<svg id="${i}" class="${i}-noselect ${i}-hidden-onload" x="0px" y="0px" viewBox="0 0 80 80">\n  <circle id="${i}-bg" cx="50%" cy="50%" r="35"></circle>\n  <path id="${i}-fill" d="M5,40a35,35 0 1,0 70,0a35,35 0 1,0 -70,0" />\n  <text id="${i}-percent" x="50%" y="51%"><tspan id="${i}-percent-value">0</tspan><tspan id="${i}-percent-super">%</tspan></text>\n</svg>\n`,c=e=>{const n=document.querySelector(`#${i}-percent-value`),t=(100-e)/100*-219.99078369140625;document.querySelector(`#${i}-fill`).setAttribute("style","stroke-dashoffset: "+t),n.innerHTML=e.toString()};e.exports={init:(e,n)=>{e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{r(s),o(a)}),n.addEventListener("message",e=>{const{action:n,data:t}=JSON.parse(e.data);if("progress"!==n)return;const r=Math.floor(100*t.percent),o=document.querySelector("#"+i);o&&(o.classList.remove(i+"-hidden",i+"-hidden-onload"),1===t.percent&&setTimeout(()=>(e=>{e.classList.add(i+"-hidden"),setTimeout(()=>c(0),1e3)})(o),5e3),c(r))})}}},function(e,n,t){const{addCss:r,addHtml:o,socketMessage:i}=t(2),s="wps-status",a=`\n@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700');\n\n#${s} {\n  background: #282d35;\n  border-radius: 0.6em;\n  display: flex;\n  flex-direction: column;\n\tfont-family: 'Open Sans', Helvetica, Arial, sans-serif;\n\tfont-size: 10px;\n  height: 90%;\n  min-height: 20em;\n  left: 50%;\n  opacity: 1;\n  overflow: hidden;\n  padding-bottom: 3em;\n  position: absolute;\n  top: 2rem;\n  transform: translateX(-50%);\n  transition: opacity .25s ease-in-out;\n  width: 95%;\n  z-index: 2147483645;\n}\n\n@keyframes ${s}-hidden-display {\n\t0% {\n\t\topacity: 1;\n\t}\n\t99% {\n\t\tdisplay: inline-flex;\n\t\topacity: 0;\n\t}\n\t100% {\n\t\tdisplay: none;\n\t\topacity: 0;\n\t}\n}\n\n#${s}.${s}-hidden {\n  animation: ${s}-hidden-display .3s;\n  animation-fill-mode:forwards;\n  display: none;\n}\n\n#${s}.${s}-min {\n  animation: minimize 10s;\n  bottom: 2em;\n  cursor: pointer;\n  height: 6em;\n  left: auto;\n  min-height: 6em;\n  padding-bottom: 0;\n  position: absolute;\n  right: 2em;\n  top: auto;\n  transform: none;\n  width: 6em;\n}\n\n#${s}.${s}-min #${s}-beacon {\n  display: block;\n}\n\n#${s}-title {\n  color: #fff;\n  font-size: 1.2em;\n  font-weight: normal;\n  margin: 0;\n  padding: 0.6em 0;\n  text-align: center;\n  width: 100%;\n}\n\n#${s}.${s}-min #${s}-title {\n  display: none;\n}\n\n#${s}-title-errors {\n  color: #ff5f58;\n  font-style: normal;\n  padding-left: 1em;\n}\n\n#${s}-title-warnings {\n  color: #ffbd2e;\n  font-style: normal;\n  padding-left: 1em;\n}\n\n#${s}-problems {\n  overflow-y: auto;\n  padding: 1em 2em;\n}\n\n#${s}-problems pre {\n  color: #ddd;\n  background: #282d35;\n  display: block;\n  font-size: 1.3em;\n\tfont-family: 'Open Sans', Helvetica, Arial, sans-serif;\n  white-space: pre-wrap;\n}\n\n#${s}-problems pre em {\n  background: #ff5f58;\n  border-radius: 0.3em;\n  color: #641e16;\n  font-style: normal;\n  line-height: 3em;\n  margin-right: 0.4em;\n  padding: 0.1em 0.4em;\n  text-transform: uppercase;\n}\n\npre#${s}-warnings em {\n  background: #ffbd2e;\n  color: #3e2723;\n}\n\npre#${s}-success {\n  display: none;\n  text-align: center;\n}\n\npre#${s}-success em {\n  background: #7fb900;\n  color: #004d40;\n}\n\n#${s}-problems.${s}-success #${s}-success {\n  display: block;\n}\n\n#${s}.${s}-min #${s}-problems {\n  display: none;\n}\n\n#${s}-nav {\n  opacity: 0.5;\n  padding: 1.2em;\n  position: absolute;\n}\n\n#${s}.${s}-min #${s}-nav {\n  display: none;\n}\n\n#${s}-nav:hover {\n  opacity: 1;\n}\n\n#${s}-nav div {\n  background: #ff5f58;\n  border-radius: 1.2em;\n  cursor: pointer;\n  display: inline-block;\n  height: 1.2em;\n  position: relative;\n  width: 1.2em;\n}\n\ndiv#${s}-min {\n  background: #ffbd2e;\n  margin-left: 0.8em;\n}\n\n#${s}-beacon {\n  border-radius: 3em;\n  display: none;\n  font-size: 10px;\n  height: 3em;\n  margin: 1.6em auto;\n  position: relative;\n  width: 3em;\n}\n\n#${s}-beacon:before, #${s}-beacon:after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(127,185,0, 0.2);\n  border-radius: 3em;\n  opacity: 0;\n}\n\n#${s}-beacon:before {\n  animation: ${s}-pulse 3s infinite linear;\n  transform: scale(1);\n}\n\n#${s}-beacon:after {\n  animation: ${s}-pulse 3s 2s infinite linear;\n}\n\n\n@keyframes ${s}-pulse {\n  0% {\n    opacity: 0;\n    transform: scale(0.6);\n  }\n  33% {\n    opacity: 1;\n    transform: scale(1);\n  }\n  100% {\n    opacity: 0;\n    transform: scale(1.4);\n  }\n}\n\n#${s}-beacon mark {\n  background: rgba(127, 185, 0, 1);\n  border-radius: 100% 100%;\n  height: 1em;\n  left: 1em;\n  position: absolute;\n  top: 1em;\n  width: 1em;\n}\n\n#${s}-beacon.${s}-error mark {\n  background: #ff5f58;\n}\n\n#${s}-beacon.${s}-error:before, #${s}-beacon.error:after {\n  background: rgba(255, 95, 88, 0.2);\n}\n\n#${s}-beacon.${s}-warning mark {\n  background: #ffbd2e;\n}\n\n#${s}-beacon.${s}-warning:before, #${s}-beacon.warning:after {\n  background: rgba(255, 189, 46, 0.2);\n}\n`,c=`\n<aside id="${s}" class="${s}-hidden" title="build status">\n  <figure id="${s}-beacon">\n    <mark/>\n  </figure>\n  <nav id="${s}-nav">\n    <div id="${s}-close" title="close"></div>\n    <div id="${s}-min" title="minmize"></div>\n  </nav>\n  <h1 id="${s}-title">\n    build status\n    <em id="${s}-title-errors"></em>\n    <em id="${s}-title-warnings"></em>\n  </h1>\n  <article id="${s}-problems">\n    <pre id="${s}-success"><em>Build Successful</em></pre>\n    <pre id="${s}-errors"></pre>\n    <pre id="${s}-warnings"></pre>\n  </article>\n</aside>\n`;e.exports={init:(e,n)=>{const t=s+"-hidden";let d,l,u,p,f,h,m,v=!1;const b=()=>{p.innerHTML="",f.innerHTML="",u.classList.remove(s+"-success"),l.className="",h.innerText="",m.innerText=""};e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{r(a),[d]=o(c),l=document.querySelector(`#${s}-beacon`),u=document.querySelector(`#${s}-problems`),p=document.querySelector(`#${s}-errors`),f=document.querySelector(`#${s}-warnings`),h=document.querySelector(`#${s}-title-errors`),m=document.querySelector(`#${s}-title-warnings`);const e=document.querySelector(`#${s}-close`),n=document.querySelector(`#${s}-min`);d.addEventListener("click",()=>{d.classList.remove(s+"-min")}),e.addEventListener("click",()=>{d.classList.add(s+"-hidden")}),n.addEventListener("click",e=>{d.classList.add(s+"-min"),e.stopImmediatePropagation()})}),i(n,(e,n)=>{if(!d)return;const{compilers:r}=window.webpackPluginServe;switch(e){case"build":b();break;case"problems":(e=>{if(e.length){u.classList.remove(s+"-success"),l.classList.add(s+"-error");for(const n of e){o(`<div><em>Error</em> in ${n}</div>`,p)}h.innerText=e.length+" Error(s)"}else h.innerText="";d.classList.remove(t)})(n.errors),(e=>{if(e.length){u.classList.remove(s+"-success"),l.classList.contains(s+"-error")||l.classList.add(s+"-warning");for(const n of e){o(`<div><em>Warning</em> in ${n}</div>`,f)}m.innerText=e.length+" Warning(s)"}else m.innerText="";d.classList.remove(t)})(n.warnings),d.classList.remove(t),v=n.errors.length||n.warnings.length;break;case"replace":for(const e of Object.keys(r))if(!r[e])return;!v||p.children.length||f.children.length||(b(),v=!1,u.classList.add(s+"-success"),d.classList.remove(t),setTimeout(()=>d.classList.add(t),3e3))}})}}},function(e,n,t){"use strict";t.r(n);var r=function(){function e(){this.results=[],this.started=!1,this.alphabet=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],this.init()}return e.prototype.init=function(){var e=this,n=document.querySelector("#currentLetter");this.timer=document.querySelector("#timer"),this.letter=n,document.addEventListener("keydown",(function(n){n.key.toUpperCase();32===n.keyCode&&e.reset()})),this.start()},e.prototype.reset=function(){clearInterval(this.intervalId),this.index=0,this.letter.innerText=this.alphabet[this.index],this.timer.innerText="0.00"},e.prototype.start=function(){var e=this;document.addEventListener("keyup",(function(n){var t=n.key.toUpperCase();"A"===t&&0===e.index?(e.startTimer(),e.advance()):t===e.alphabet[e.index]&&e.advance()}))},e.prototype.advance=function(){this.index++,this.alphabet[this.index]?this.letter.innerText=this.alphabet[this.index]:(this.saveTime(this.timer.innerText),this.finish())},e.prototype.fail=function(){alert("failed")},e.prototype.startTimer=function(){var e=this,n=0;this.intervalId=setInterval((function(){n+=10,e.timer.innerText=(n/1e3).toFixed(3)}),10)},e.prototype.saveTime=function(e){this.time=e,this.results.push(e)},e.prototype.finish=function(){alert(this.time),this.reset()},e}();t(4);document.addEventListener("DOMContentLoaded",(function(){new r}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,