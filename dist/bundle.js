!function(e){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,n){if(!k[e]||!w[e])return;for(var t in w[e]=!1,n)Object.prototype.hasOwnProperty.call(n,t)&&(h[t]=n[t]);0==--g&&0===y&&E()}(e,t),n&&n(e,t)};var t,r=!0,o="b941ee447bd92cbc3c1f",i={},s=[],a=[];function c(e){var n=C[e];if(!n)return H;var r=function(r){return n.hot.active?(C[r]?-1===C[r].parents.indexOf(e)&&C[r].parents.push(e):(s=[e],t=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),H(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return H[e]},set:function(n){H[e]=n}}};for(var i in H)Object.prototype.hasOwnProperty.call(H,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===u&&p("prepare"),y++,H.e(e).then(n,(function(e){throw n(),e}));function n(){y--,"prepare"===u&&(b[e]||$(e),0===y&&0===g&&E())}},r.t=function(e,n){return 1&n&&(e=r(e)),H.t(e,-2&n)},r}function l(n){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:t!==n,active:!0,accept:function(e,n){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._acceptedDependencies[e[t]]=n||function(){};else r._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._declinedDependencies[e[n]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=r._disposeHandlers.indexOf(e);n>=0&&r._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":(h={})[n]=e[n],p("ready");break;case"ready":O(n);break;case"prepare":case"check":case"dispose":case"apply":(v=v||[]).push(n)}},check:S,apply:T,status:function(e){if(!e)return u;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var n=d.indexOf(e);n>=0&&d.splice(n,1)},data:i[n]};return t=void 0,r}var d=[],u="idle";function p(e){u=e;for(var n=0;n<d.length;n++)d[n].call(null,e)}var f,h,m,v,g=0,y=0,b={},w={},k={};function x(e){return+e+""===e?+e:e}function S(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(n=1e4,n=n||1e4,new Promise((function(e,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var r=new XMLHttpRequest,o=H.p+"bde52c9-wps-hmr.json";r.open("GET",o,!0),r.timeout=n,r.send(null)}catch(e){return t(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)t(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)t(new Error("Manifest request to "+o+" failed."));else{try{var n=JSON.parse(r.responseText)}catch(e){return void t(e)}e(n)}}}))).then((function(e){if(!e)return p(L()?"ready":"idle"),null;w={},b={},k=e.c,m=e.h,p("prepare");var n=new Promise((function(e,n){f={resolve:e,reject:n}}));h={};return $(0),"prepare"===u&&0===y&&0===g&&E(),n}));var n}function $(e){k[e]?(w[e]=!0,g++,function(e){var n=document.createElement("script");n.charset="utf-8",n.src=H.p+"bde52c9-"+e+"-wps-hmr.js",document.head.appendChild(n)}(e)):b[e]=!0}function E(){p("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then((function(){return T(r)})).then((function(n){e.resolve(n)}),(function(n){e.reject(n)}));else{var n=[];for(var t in h)Object.prototype.hasOwnProperty.call(h,t)&&n.push(x(t));e.resolve(n)}}function T(n){if("ready"!==u)throw new Error("apply() is only allowed in ready status");return function n(r){var a,c,l,d,u;function f(e){for(var n=[e],t={},r=n.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,s=o.chain;if((d=C[i])&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<d.parents.length;a++){var c=d.parents[a],l=C[c];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([c]),moduleId:i,parentId:c};-1===n.indexOf(c)&&(l.hot._acceptedDependencies[i]?(t[c]||(t[c]=[]),g(t[c],[i])):(delete t[c],n.push(c),r.push({chain:s.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function g(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}L();var y={},b=[],w={},S=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var $ in h)if(Object.prototype.hasOwnProperty.call(h,$)){var E;u=x($),E=h[$]?f(u):{type:"disposed",moduleId:$};var T=!1,O=!1,I=!1,_="";switch(E.chain&&(_="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":r.onDeclined&&r.onDeclined(E),r.ignoreDeclined||(T=new Error("Aborted because of self decline: "+E.moduleId+_));break;case"declined":r.onDeclined&&r.onDeclined(E),r.ignoreDeclined||(T=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+_));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(E),r.ignoreUnaccepted||(T=new Error("Aborted because "+u+" is not accepted"+_));break;case"accepted":r.onAccepted&&r.onAccepted(E),O=!0;break;case"disposed":r.onDisposed&&r.onDisposed(E),I=!0;break;default:throw new Error("Unexception type "+E.type)}if(T)return p("abort"),Promise.reject(T);if(O)for(u in w[u]=h[u],g(b,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,u)&&(y[u]||(y[u]=[]),g(y[u],E.outdatedDependencies[u]));I&&(g(b,[E.moduleId]),w[u]=S)}var M,j=[];for(c=0;c<b.length;c++)u=b[c],C[u]&&C[u].hot._selfAccepted&&w[u]!==S&&!C[u].hot._selfInvalidated&&j.push({module:u,parents:C[u].parents.slice(),errorHandler:C[u].hot._selfAccepted});p("dispose"),Object.keys(k).forEach((function(e){!1===k[e]&&function(e){delete installedChunks[e]}(e)}));var P,D,q=b.slice();for(;q.length>0;)if(u=q.pop(),d=C[u]){var U={},A=d.hot._disposeHandlers;for(l=0;l<A.length;l++)(a=A[l])(U);for(i[u]=U,d.hot.active=!1,delete C[u],delete y[u],l=0;l<d.children.length;l++){var N=C[d.children[l]];N&&((M=N.parents.indexOf(u))>=0&&N.parents.splice(M,1))}}for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(d=C[u]))for(D=y[u],l=0;l<D.length;l++)P=D[l],(M=d.children.indexOf(P))>=0&&d.children.splice(M,1);p("apply"),void 0!==m&&(o=m,m=void 0);for(u in h=void 0,w)Object.prototype.hasOwnProperty.call(w,u)&&(e[u]=w[u]);var R=null;for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(d=C[u])){D=y[u];var z=[];for(c=0;c<D.length;c++)if(P=D[c],a=d.hot._acceptedDependencies[P]){if(-1!==z.indexOf(a))continue;z.push(a)}for(c=0;c<z.length;c++){a=z[c];try{a(D)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:u,dependencyId:D[c],error:e}),r.ignoreErrored||R||(R=e)}}}for(c=0;c<j.length;c++){var F=j[c];u=F.module,s=F.parents,t=u;try{H(u)}catch(e){if("function"==typeof F.errorHandler)try{F.errorHandler(e)}catch(n){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),r.ignoreErrored||R||(R=n),R||(R=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:u,error:e}),r.ignoreErrored||R||(R=e)}}if(R)return p("fail"),Promise.reject(R);if(v)return n(r).then((function(e){return b.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e}));return p("idle"),new Promise((function(e){e(b)}))}(n=n||{})}function L(){if(v)return h||(h={}),v.forEach(O),v=void 0,!0}function O(n){Object.prototype.hasOwnProperty.call(h,n)||(h[n]=e[n])}var C={};function H(n){if(C[n])return C[n].exports;var t=C[n]={i:n,l:!1,exports:{},hot:l(n),parents:(a=s,s=[],a),children:[]};return e[n].call(t.exports,t,t.exports,c(n)),t.l=!0,t.exports}H.m=e,H.c=C,H.d=function(e,n,t){H.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},H.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},H.t=function(e,n){if(1&n&&(e=H(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(H.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)H.d(t,r,function(n){return e[n]}.bind(null,r));return t},H.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return H.d(n,"a",n),n},H.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},H.p="",H.h=function(){return o},c(4)(H.s=4)}([function(e,n){const{error:t,info:r,warn:o}=console,i={error:t.bind(console,"⬡ wps:"),info:r.bind(console,"⬡ wps:"),refresh:"Please refresh the page",warn:o.bind(console,"⬡ wps:")},s=()=>{},a={error:s,info:s,warn:s};e.exports=()=>window.webpackPluginServe.silent?a:i},function(e,n,t){e.exports=function(){"use strict";
/*!
   * mustache.js - Logic-less {{mustache}} templates with JavaScript
   * http://github.com/janl/mustache.js
   */var e=Object.prototype.toString,n=Array.isArray||function(n){return"[object Array]"===e.call(n)};function t(e){return"function"==typeof e}function r(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function o(e,n){return null!=e&&"object"==typeof e&&n in e}var i=RegExp.prototype.test,s=/\S/;function a(e){return!function(e,n){return i.call(e,n)}(s,e)}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},l=/\s*/,d=/\s+/,u=/\s*=/,p=/\s*\}/,f=/#|\^|\/|>|\{|&|=|!/;function h(e){this.string=e,this.tail=e,this.pos=0}function m(e,n){this.view=e,this.cache={".":this.view},this.parent=n}function v(){this.templateCache={_cache:{},set:function(e,n){this._cache[e]=n},get:function(e){return this._cache[e]},clear:function(){this._cache={}}}}h.prototype.eos=function(){return""===this.tail},h.prototype.scan=function(e){var n=this.tail.match(e);if(!n||0!==n.index)return"";var t=n[0];return this.tail=this.tail.substring(t.length),this.pos+=t.length,t},h.prototype.scanUntil=function(e){var n,t=this.tail.search(e);switch(t){case-1:n=this.tail,this.tail="";break;case 0:n="";break;default:n=this.tail.substring(0,t),this.tail=this.tail.substring(t)}return this.pos+=n.length,n},m.prototype.push=function(e){return new m(e,this)},m.prototype.lookup=function(e){var n,r,i,s=this.cache;if(s.hasOwnProperty(e))n=s[e];else{for(var a,c,l,d=this,u=!1;d;){if(e.indexOf(".")>0)for(a=d.view,c=e.split("."),l=0;null!=a&&l<c.length;)l===c.length-1&&(u=o(a,c[l])||(r=a,i=c[l],null!=r&&"object"!=typeof r&&r.hasOwnProperty&&r.hasOwnProperty(i))),a=a[c[l++]];else a=d.view[e],u=o(d.view,e);if(u){n=a;break}d=d.parent}s[e]=n}return t(n)&&(n=n.call(this.view)),n},v.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},v.prototype.parse=function(e,t){var o=this.templateCache,i=e+":"+(t||g.tags).join(":"),s=void 0!==o,c=s?o.get(i):void 0;return null==c&&(c=function(e,t){if(!e)return[];var o,i,s,c=!1,m=[],v=[],y=[],b=!1,w=!1,k="",x=0;function S(){if(b&&!w)for(;y.length;)delete v[y.pop()];else y=[];b=!1,w=!1}function $(e){if("string"==typeof e&&(e=e.split(d,2)),!n(e)||2!==e.length)throw new Error("Invalid tags: "+e);o=new RegExp(r(e[0])+"\\s*"),i=new RegExp("\\s*"+r(e[1])),s=new RegExp("\\s*"+r("}"+e[1]))}$(t||g.tags);for(var E,T,L,O,C,H,I=new h(e);!I.eos();){if(E=I.pos,L=I.scanUntil(o))for(var _=0,M=L.length;_<M;++_)a(O=L.charAt(_))?(y.push(v.length),k+=O):(w=!0,c=!0,k+=" "),v.push(["text",O,E,E+1]),E+=1,"\n"===O&&(S(),k="",x=0,c=!1);if(!I.scan(o))break;if(b=!0,T=I.scan(f)||"name",I.scan(l),"="===T?(L=I.scanUntil(u),I.scan(u),I.scanUntil(i)):"{"===T?(L=I.scanUntil(s),I.scan(p),I.scanUntil(i),T="&"):L=I.scanUntil(i),!I.scan(i))throw new Error("Unclosed tag at "+I.pos);if(C=">"==T?[T,L,E,I.pos,k,x,c]:[T,L,E,I.pos],x++,v.push(C),"#"===T||"^"===T)m.push(C);else if("/"===T){if(!(H=m.pop()))throw new Error('Unopened section "'+L+'" at '+E);if(H[1]!==L)throw new Error('Unclosed section "'+H[1]+'" at '+E)}else"name"===T||"{"===T||"&"===T?w=!0:"="===T&&$(L)}if(S(),H=m.pop())throw new Error('Unclosed section "'+H[1]+'" at '+I.pos);return function(e){for(var n,t=[],r=t,o=[],i=0,s=e.length;i<s;++i)switch((n=e[i])[0]){case"#":case"^":r.push(n),o.push(n),r=n[4]=[];break;case"/":o.pop()[5]=n[2],r=o.length>0?o[o.length-1][4]:t;break;default:r.push(n)}return t}(function(e){for(var n,t,r=[],o=0,i=e.length;o<i;++o)(n=e[o])&&("text"===n[0]&&t&&"text"===t[0]?(t[1]+=n[1],t[3]=n[3]):(r.push(n),t=n));return r}(v))}(e,t),s&&o.set(i,c)),c},v.prototype.render=function(e,n,t,r){var o=this.parse(e,r),i=n instanceof m?n:new m(n,void 0);return this.renderTokens(o,i,t,e,r)},v.prototype.renderTokens=function(e,n,t,r,o){for(var i,s,a,c="",l=0,d=e.length;l<d;++l)a=void 0,"#"===(s=(i=e[l])[0])?a=this.renderSection(i,n,t,r):"^"===s?a=this.renderInverted(i,n,t,r):">"===s?a=this.renderPartial(i,n,t,o):"&"===s?a=this.unescapedValue(i,n):"name"===s?a=this.escapedValue(i,n):"text"===s&&(a=this.rawValue(i)),void 0!==a&&(c+=a);return c},v.prototype.renderSection=function(e,r,o,i){var s=this,a="",c=r.lookup(e[1]);if(c){if(n(c))for(var l=0,d=c.length;l<d;++l)a+=this.renderTokens(e[4],r.push(c[l]),o,i);else if("object"==typeof c||"string"==typeof c||"number"==typeof c)a+=this.renderTokens(e[4],r.push(c),o,i);else if(t(c)){if("string"!=typeof i)throw new Error("Cannot use higher-order sections without the original template");null!=(c=c.call(r.view,i.slice(e[3],e[5]),(function(e){return s.render(e,r,o)})))&&(a+=c)}else a+=this.renderTokens(e[4],r,o,i);return a}},v.prototype.renderInverted=function(e,t,r,o){var i=t.lookup(e[1]);if(!i||n(i)&&0===i.length)return this.renderTokens(e[4],t,r,o)},v.prototype.indentPartial=function(e,n,t){for(var r=n.replace(/[^ \t]/g,""),o=e.split("\n"),i=0;i<o.length;i++)o[i].length&&(i>0||!t)&&(o[i]=r+o[i]);return o.join("\n")},v.prototype.renderPartial=function(e,n,r,o){if(r){var i=t(r)?r(e[1]):r[e[1]];if(null!=i){var s=e[6],a=e[5],c=e[4],l=i;return 0==a&&c&&(l=this.indentPartial(i,c,s)),this.renderTokens(this.parse(l,o),n,r,l,o)}}},v.prototype.unescapedValue=function(e,n){var t=n.lookup(e[1]);if(null!=t)return t},v.prototype.escapedValue=function(e,n){var t=n.lookup(e[1]);if(null!=t)return g.escape(t)},v.prototype.rawValue=function(e){return e[1]};var g={name:"mustache.js",version:"4.0.1",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(e){y.templateCache=e},get templateCache(){return y.templateCache}},y=new v;return g.clearCache=function(){return y.clearCache()},g.parse=function(e,n){return y.parse(e,n)},g.render=function(e,t,r,o){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+(n(i=e)?"array":typeof i)+'" was given as the first argument for mustache#render(template, view, partials)');var i;return y.render(e,t,r,o)},g.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return c[e]}))},g.Scanner=h,g.Context=m,g.Writer=v,g}()},function(e,n,t){(n=t(7)(!1)).push([e.i,'*{margin:0;padding:0}body{height:100vh;background:#111;display:flex;flex-direction:column;font-family:"Titillium Web", sans-serif}.container{flex:1;display:grid;place-items:center;position:relative;height:80vh}.screen{font-family:"Fredoka One",sans-serif;font-size:6em;color:#f06d06;background:none;appearance:none;border:none;text-align:center}.screen .intro{display:block;color:white;font-size:2rem}.cta{color:#06f083;display:block;animation:shake 500ms linear infinite alternate}#footer{background:#222;box-sizing:border-box;padding:20px;color:white;display:flex;align-items:center;justify-content:space-between}#footer .buttons{display:flex;align-items:center}#footer .buttons .button{height:40px;width:40px;background:#333;border-radius:50%;appearance:none;border:none;color:#888;display:flex;align-items:center;justify-content:center;cursor:pointer;transition:200ms}#footer .buttons .button:not(:last-child){margin-right:10px}#footer .buttons .button:hover{background-color:#444}#footer .number{color:#06b9f0}.--is-wrong{animation:shake 75ms linear infinite alternate}@keyframes shake{0%{transform:scale(1)}100%{transform:scale(1.2)}}#timer-container{color:white;font-size:4rem;text-align:center;opacity:0;transition:200ms}#timer-container.--is-visible{opacity:1}#timer-container #timer{color:#06b9f0}.dialog{position:absolute;width:50vw;height:40vh;top:calc(50% - 20vh);left:calc((50% - 25vw));background:#111;padding:20px;z-index:10;box-sizing:border-box}.end-screen{text-align:center}.end-screen h2{font-size:4rem;font-family:"Fredoka One","sans-serif";color:#f06d06}.end-screen #end-score{font-size:5rem;color:#06b9f0}.end-screen p{font-size:2rem;color:white}.end-screen p .space{color:#06f083}\n',""]),e.exports=n},function(e,n){e.exports={addCss:e=>{const n=document.createElement("style");n.type="text/css",e.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e)),document.head.appendChild(n)},addHtml:(e,n)=>{const t=document.createElement("div"),r=[];for(t.innerHTML=e.trim();t.firstChild;)r.push((n||document.body).appendChild(t.firstChild));return r},socketMessage:(e,n)=>{e.addEventListener("message",e=>{const{action:t,data:r={}}=JSON.parse(e.data);n(t,r)})}}},function(e,n,t){t(15),e.exports=t(8)},function(e,n,t){var r=t(6),o=t(2);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},s=r(o,i);if(!o.locals||e.hot.invalidate){var a=o.locals;e.hot.accept(2,(function(){"string"==typeof(o=(o=t(2)).__esModule?o.default:o)&&(o=[[e.i,o,""]]),function(e,n){if(!e&&n||e&&!n)return!1;var t;for(t in e)if(e[t]!==n[t])return!1;for(t in n)if(!e[t])return!1;return!0}(a,o.locals)?(a=o.locals,s(o)):e.hot.invalidate()}))}e.hot.dispose((function(){s()})),e.exports=o.locals||{}},function(e,n,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),s=[];function a(e){for(var n=-1,t=0;t<s.length;t++)if(s[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],o=0;o<e.length;o++){var i=e[o],c=n.base?i[0]+n.base:i[0],l=t[c]||0,d="".concat(c," ").concat(l);t[c]=l+1;var u=a(d),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(s[u].references++,s[u].updater(p)):s.push({identifier:d,updater:v(p,n),references:1}),r.push(d)}return r}function l(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var s=i(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}return n}var d,u=(d=[],function(e,n){return d[e]=n,d.filter(Boolean).join("\n")});function p(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(n,o);else{var i=document.createTextNode(o),s=e.childNodes;s[n]&&e.removeChild(s[n]),s.length?e.insertBefore(i,s[n]):e.appendChild(i)}}function f(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,n){var t,r,o;if(n.singleton){var i=m++;t=h||(h=l(n)),r=p.bind(null,t,i,!1),o=p.bind(null,t,i,!0)}else t=l(n),r=f.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=a(t[r]);s[o].references--}for(var i=c(e,n),l=0;l<t.length;l++){var d=a(t[l]);0===s[d].references&&(s[d].updater(),s.splice(d,1))}t=i}}}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}var s,a,c;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},function(e,n,t){(()=>{const{run:e}=t(9);let n,r="<unknown>";try{n={compress:null,headers:null,historyFallback:!1,hmr:!0,host:null,liveReload:!1,log:{level:"info",prefix:{template:"{{level}}"},name:"webpack-plugin-serve"},open:!1,port:55555,progress:!0,ramdisk:!1,secure:!1,static:"dist",status:!0,address:"[::]:55555",compilerName:null,wpsId:"bde52c9"}}catch(e){const{log:n}=t(0);n.error("The entry for webpack-plugin-serve was included in your build, but it does not appear that the plugin was. Please check your configuration.")}try{r=t.h()}catch(e){}e(r,n)})()},function(e,n,t){e.exports={run:(e,n)=>{const{address:r,client:o={},progress:i,secure:s,status:a}=n;n.firstInstance=!window.webpackPluginServe,window.webpackPluginServe=window.webpackPluginServe||{compilers:{}},window.webpackPluginServe.silent=!!o.silent;const{ClientSocket:c}=t(10),{replace:l}=t(11),{error:d,info:u,warn:p}=t(0)(),f=new c(o,`${s?"wss":"ws"}://${o.address||r}/wps`),{compilerName:h}=n;if(window.webpackPluginServe.compilers[h]={},window.addEventListener("beforeunload",()=>f.close()),f.addEventListener("message",t=>{const{action:r,data:o={}}=JSON.parse(t.data),{errors:i,hash:s="<?>",warnings:a}=o||{},c=s.slice(0,7),f=n.compilerName?`(Compiler: ${n.compilerName}) `:"",m=window.webpackPluginServe.compilers[h],{wpsId:v}=o;switch(r){case"build":m.done=!1;break;case"connected":u("WebSocket connected "+f);break;case"done":m.done=!0;break;case"problems":o.errors.length&&d(`${f}Build ${c} produced errors:\n`,i),o.warnings.length&&p(`${f}Build ${c} produced warnings:\n`,a);break;case"reload":window.location.reload();break;case"replace":v&&v===n.wpsId&&l(e,s)}}),n.firstInstance){if("minimal"===i){const{init:e}=t(12);e(n,f)}else if(i){const{init:e}=t(13);e(n,f)}if(a){const{init:e}=t(14);e(n,f)}u("Hot Module Replacement is active"),n.liveReload&&u("Live Reload taking precedence over Hot Module Replacement")}}}},function(e,n,t){const{error:r,refresh:o,warn:i}=t(0)(),s=[1008,1011];e.exports={ClientSocket:class{constructor(e,...n){this.args=n,this.attempts=0,this.eventHandlers=[],this.options=e,this.retrying=!1,this.connect()}addEventListener(...e){this.eventHandlers.push(e),this.socket.addEventListener(...e)}close(){this.socket.close()}connect(){if(this.socket&&delete this.socket,this.connecting=!0,this.socket=new WebSocket(...this.args),this.options.retry?this.socket.addEventListener("close",e=>{s.includes(e.code)||(this.retrying||i("The WebSocket was closed and will attempt to reconnect"),this.reconnect())}):this.socket.onclose=()=>i("The client WebSocket was closed. "+o),this.socket.addEventListener("open",()=>{this.attempts=0,this.retrying=!1}),this.eventHandlers.length)for(const[e,n]of this.eventHandlers)this.socket.addEventListener(e,n)}reconnect(){if(this.attempts+=1,this.retrying=!0,this.attempts>10)return r("The WebSocket could not be reconnected. "+o),void(this.retrying=!1);const e=1e3*this.attempts**2;setTimeout(()=>this.connect(this.args),e)}removeEventListener(...e){const[,n]=e;this.eventHandlers=this.eventHandlers.filter(([,e])=>e===n),this.socket.removeEventListener(...e)}}}},function(e,n,t){const{error:r,info:o,refresh:i,warn:s}=t(0)();let a=!0;const c={onUnaccepted(e){s("Change in unaccepted module(s):\n",e),s(e)},onDeclined(e){s("Change in declined module(s):\n",e)},onErrored(e){r("Error in module(s):\n",e)}};e.exports={replace:async(n,t)=>{const{apply:r,check:l,status:d}=e.hot;if(t&&(a=t.includes(n)),!a){const e=d();if("abort"===e||"fail"===e)return void s(`An HMR update was triggered, but ${e}ed. ${i}`);let n;try{n=await l(!1)}catch(e){return}if(!n)return void s("No modules found for replacement. "+i);n=await r(c),n&&(a=!0,o(`Build ${t.slice(0,7)} replaced:\n`,n))}}}},function(e,n,t){const{addCss:r,addHtml:o}=t(3),i="wps-progress-minimal",s=`\n<div id="${i}" class="${i}-hidden">\n  <div id="${i}-bar"></div>\n</div>\n`,a=`\n#${i} {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 4px;\n  width: 100vw;\n  z-index: 2147483645;\n}\n\n#${i}-bar {\n  width: 0%;\n  height: 4px;\n  background-color: rgb(186, 223, 172);\n  transition: width 1s ease-in-out;\n}\n\n.${i}-hidden{\n  display: none;\n}\n`,c=e=>{document.querySelector(`#${i}-bar`).style.width=e+"%"};e.exports={init:(e,n)=>{e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{r(a),o(s)}),n.addEventListener("message",e=>{const{action:n,data:t}=JSON.parse(e.data);if("progress"!==n)return;const r=Math.floor(100*t.percent),o=document.querySelector("#"+i);o.classList.remove(i+"-hidden"),1===t.percent&&setTimeout(()=>(e=>{e.classList.add(i+"-hidden"),setTimeout(()=>c(0),1e3)})(o),5e3),c(r)})}}},function(e,n,t){const{addCss:r,addHtml:o}=t(3),i="wps-progress",s=`\n@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700');\n\n#${i}{\n  width: 200px;\n  height: 200px;\n  position: absolute;\n  right: 5%;\n  top: 5%;\n  transition: opacity .25s ease-in-out;\n  z-index: 2147483645;\n}\n\n#${i}-bg {\n  fill: #282d35;\n}\n\n#${i}-fill {\n  fill: rgba(0, 0, 0, 0);\n  stroke: rgb(186, 223, 172);\n  stroke-dasharray: 219.99078369140625;\n  stroke-dashoffset: -219.99078369140625;\n  stroke-width: 10;\n  transform: rotate(90deg)translate(0px, -80px);\n  transition: stroke-dashoffset 1s;\n}\n\n#${i}-percent {\n  font-family: 'Open Sans';\n  font-size: 18px;\n  fill: #ffffff;\n}\n\n#${i}-percent-value {\n  dominant-baseline: middle;\n  text-anchor: middle;\n}\n\n#${i}-percent-super {\n  fill: #bdc3c7;\n  font-size: .45em;\n  baseline-shift: 10%;\n}\n\n.${i}-noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: default;\n}\n\n@keyframes ${i}-hidden-display {\n\t0% {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t\t-webkit-transform: scale(1);\n\t}\n\t99% {\n\t\tdisplay: inline-flex;\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t\t-webkit-transform: scale(0);\n\t}\n\t100% {\n\t\tdisplay: none;\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t\t-webkit-transform: scale(0);\n\t}\n}\n\n.${i}-hidden {\n  animation: ${i}-hidden-display .3s;\n  animation-fill-mode:forwards;\n  display: inline-flex;\n}\n\n.${i}-hidden-onload {\n  display: none;\n}\n`,a=`\n<svg id="${i}" class="${i}-noselect ${i}-hidden-onload" x="0px" y="0px" viewBox="0 0 80 80">\n  <circle id="${i}-bg" cx="50%" cy="50%" r="35"></circle>\n  <path id="${i}-fill" d="M5,40a35,35 0 1,0 70,0a35,35 0 1,0 -70,0" />\n  <text id="${i}-percent" x="50%" y="51%"><tspan id="${i}-percent-value">0</tspan><tspan id="${i}-percent-super">%</tspan></text>\n</svg>\n`,c=e=>{const n=document.querySelector(`#${i}-percent-value`),t=(100-e)/100*-219.99078369140625;document.querySelector(`#${i}-fill`).setAttribute("style","stroke-dashoffset: "+t),n.innerHTML=e.toString()};e.exports={init:(e,n)=>{e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{r(s),o(a)}),n.addEventListener("message",e=>{const{action:n,data:t}=JSON.parse(e.data);if("progress"!==n)return;const r=Math.floor(100*t.percent),o=document.querySelector("#"+i);o&&(o.classList.remove(i+"-hidden",i+"-hidden-onload"),1===t.percent&&setTimeout(()=>(e=>{e.classList.add(i+"-hidden"),setTimeout(()=>c(0),1e3)})(o),5e3),c(r))})}}},function(e,n,t){const{addCss:r,addHtml:o,socketMessage:i}=t(3),s="wps-status",a=`\n@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700');\n\n#${s} {\n  background: #282d35;\n  border-radius: 0.6em;\n  display: flex;\n  flex-direction: column;\n\tfont-family: 'Open Sans', Helvetica, Arial, sans-serif;\n\tfont-size: 10px;\n  height: 90%;\n  min-height: 20em;\n  left: 50%;\n  opacity: 1;\n  overflow: hidden;\n  padding-bottom: 3em;\n  position: absolute;\n  top: 2rem;\n  transform: translateX(-50%);\n  transition: opacity .25s ease-in-out;\n  width: 95%;\n  z-index: 2147483645;\n}\n\n@keyframes ${s}-hidden-display {\n\t0% {\n\t\topacity: 1;\n\t}\n\t99% {\n\t\tdisplay: inline-flex;\n\t\topacity: 0;\n\t}\n\t100% {\n\t\tdisplay: none;\n\t\topacity: 0;\n\t}\n}\n\n#${s}.${s}-hidden {\n  animation: ${s}-hidden-display .3s;\n  animation-fill-mode:forwards;\n  display: none;\n}\n\n#${s}.${s}-min {\n  animation: minimize 10s;\n  bottom: 2em;\n  cursor: pointer;\n  height: 6em;\n  left: auto;\n  min-height: 6em;\n  padding-bottom: 0;\n  position: absolute;\n  right: 2em;\n  top: auto;\n  transform: none;\n  width: 6em;\n}\n\n#${s}.${s}-min #${s}-beacon {\n  display: block;\n}\n\n#${s}-title {\n  color: #fff;\n  font-size: 1.2em;\n  font-weight: normal;\n  margin: 0;\n  padding: 0.6em 0;\n  text-align: center;\n  width: 100%;\n}\n\n#${s}.${s}-min #${s}-title {\n  display: none;\n}\n\n#${s}-title-errors {\n  color: #ff5f58;\n  font-style: normal;\n  padding-left: 1em;\n}\n\n#${s}-title-warnings {\n  color: #ffbd2e;\n  font-style: normal;\n  padding-left: 1em;\n}\n\n#${s}-problems {\n  overflow-y: auto;\n  padding: 1em 2em;\n}\n\n#${s}-problems pre {\n  color: #ddd;\n  background: #282d35;\n  display: block;\n  font-size: 1.3em;\n\tfont-family: 'Open Sans', Helvetica, Arial, sans-serif;\n  white-space: pre-wrap;\n}\n\n#${s}-problems pre em {\n  background: #ff5f58;\n  border-radius: 0.3em;\n  color: #641e16;\n  font-style: normal;\n  line-height: 3em;\n  margin-right: 0.4em;\n  padding: 0.1em 0.4em;\n  text-transform: uppercase;\n}\n\npre#${s}-warnings em {\n  background: #ffbd2e;\n  color: #3e2723;\n}\n\npre#${s}-success {\n  display: none;\n  text-align: center;\n}\n\npre#${s}-success em {\n  background: #7fb900;\n  color: #004d40;\n}\n\n#${s}-problems.${s}-success #${s}-success {\n  display: block;\n}\n\n#${s}.${s}-min #${s}-problems {\n  display: none;\n}\n\n#${s}-nav {\n  opacity: 0.5;\n  padding: 1.2em;\n  position: absolute;\n}\n\n#${s}.${s}-min #${s}-nav {\n  display: none;\n}\n\n#${s}-nav:hover {\n  opacity: 1;\n}\n\n#${s}-nav div {\n  background: #ff5f58;\n  border-radius: 1.2em;\n  cursor: pointer;\n  display: inline-block;\n  height: 1.2em;\n  position: relative;\n  width: 1.2em;\n}\n\ndiv#${s}-min {\n  background: #ffbd2e;\n  margin-left: 0.8em;\n}\n\n#${s}-beacon {\n  border-radius: 3em;\n  display: none;\n  font-size: 10px;\n  height: 3em;\n  margin: 1.6em auto;\n  position: relative;\n  width: 3em;\n}\n\n#${s}-beacon:before, #${s}-beacon:after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(127,185,0, 0.2);\n  border-radius: 3em;\n  opacity: 0;\n}\n\n#${s}-beacon:before {\n  animation: ${s}-pulse 3s infinite linear;\n  transform: scale(1);\n}\n\n#${s}-beacon:after {\n  animation: ${s}-pulse 3s 2s infinite linear;\n}\n\n\n@keyframes ${s}-pulse {\n  0% {\n    opacity: 0;\n    transform: scale(0.6);\n  }\n  33% {\n    opacity: 1;\n    transform: scale(1);\n  }\n  100% {\n    opacity: 0;\n    transform: scale(1.4);\n  }\n}\n\n#${s}-beacon mark {\n  background: rgba(127, 185, 0, 1);\n  border-radius: 100% 100%;\n  height: 1em;\n  left: 1em;\n  position: absolute;\n  top: 1em;\n  width: 1em;\n}\n\n#${s}-beacon.${s}-error mark {\n  background: #ff5f58;\n}\n\n#${s}-beacon.${s}-error:before, #${s}-beacon.error:after {\n  background: rgba(255, 95, 88, 0.2);\n}\n\n#${s}-beacon.${s}-warning mark {\n  background: #ffbd2e;\n}\n\n#${s}-beacon.${s}-warning:before, #${s}-beacon.warning:after {\n  background: rgba(255, 189, 46, 0.2);\n}\n`,c=`\n<aside id="${s}" class="${s}-hidden" title="build status">\n  <figure id="${s}-beacon">\n    <mark/>\n  </figure>\n  <nav id="${s}-nav">\n    <div id="${s}-close" title="close"></div>\n    <div id="${s}-min" title="minmize"></div>\n  </nav>\n  <h1 id="${s}-title">\n    build status\n    <em id="${s}-title-errors"></em>\n    <em id="${s}-title-warnings"></em>\n  </h1>\n  <article id="${s}-problems">\n    <pre id="${s}-success"><em>Build Successful</em></pre>\n    <pre id="${s}-errors"></pre>\n    <pre id="${s}-warnings"></pre>\n  </article>\n</aside>\n`;e.exports={init:(e,n)=>{const t=s+"-hidden";let l,d,u,p,f,h,m,v=!1;const g=()=>{p.innerHTML="",f.innerHTML="",u.classList.remove(s+"-success"),d.className="",h.innerText="",m.innerText=""};e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{r(a),[l]=o(c),d=document.querySelector(`#${s}-beacon`),u=document.querySelector(`#${s}-problems`),p=document.querySelector(`#${s}-errors`),f=document.querySelector(`#${s}-warnings`),h=document.querySelector(`#${s}-title-errors`),m=document.querySelector(`#${s}-title-warnings`);const e=document.querySelector(`#${s}-close`),n=document.querySelector(`#${s}-min`);l.addEventListener("click",()=>{l.classList.remove(s+"-min")}),e.addEventListener("click",()=>{l.classList.add(s+"-hidden")}),n.addEventListener("click",e=>{l.classList.add(s+"-min"),e.stopImmediatePropagation()})}),i(n,(e,n)=>{if(!l)return;const{compilers:r}=window.webpackPluginServe;switch(e){case"build":g();break;case"problems":(e=>{if(e.length){u.classList.remove(s+"-success"),d.classList.add(s+"-error");for(const n of e){o(`<div><em>Error</em> in ${n}</div>`,p)}h.innerText=e.length+" Error(s)"}else h.innerText="";l.classList.remove(t)})(n.errors),(e=>{if(e.length){u.classList.remove(s+"-success"),d.classList.contains(s+"-error")||d.classList.add(s+"-warning");for(const n of e){o(`<div><em>Warning</em> in ${n}</div>`,f)}m.innerText=e.length+" Warning(s)"}else m.innerText="";l.classList.remove(t)})(n.warnings),l.classList.remove(t),v=n.errors.length||n.warnings.length;break;case"replace":for(const e of Object.keys(r))if(!r[e])return;!v||p.children.length||f.children.length||(g(),v=!1,u.classList.add(s+"-success"),l.classList.remove(t),setTimeout(()=>l.classList.add(t),3e3))}})}}},function(e,n,t){"use strict";t.r(n);var r=t(1),o=Intl.DateTimeFormat,i=function(){function e(e){this.container=e,this.scores=this.getSavedScores(),this.template=document.querySelector('[data-id="tpl-scores"]').innerHTML}return e.prototype.saveScore=function(e){var n;(n=(n=this.getSavedScores()?this.getSavedScores():[]).sort((function(e,n){return e.actualTime-n.actualTime}))).length>10?n[n.length-1]=e:n.push(e),localStorage.setItem("scores",JSON.stringify(n)),this.scores=n},e.prototype.getSavedScores=function(){return JSON.parse(localStorage.getItem("scores"))},e.prototype.render=function(){var e=this.scores;e&&e.length>=1&&e.sort((function(e,n){return e.actualTime>n.actualTime}));var n={scores:e,highScore:this.getHighScore()};this.container.innerHTML=r.render(this.template,n),this.setup()},e.prototype.setup=function(){var e=this;document.querySelector("#clear-scores").addEventListener("click",(function(){e.clear()}))},e.prototype.getHighScore=function(){var e=this.scores;return e&&e.length>=1?(e.sort((function(e,n){return e.actualTime-n.actualTime})),e[0]):{}},e.prototype.clear=function(){this.scores=[],localStorage.setItem("scores",JSON.stringify([])),this.render()},e.createScore=function(e){var n=new Date,t=new o;return{timestamp:Date.now(),date:t.format(n),score:(e/1e3).toFixed(3),actualTime:e}},e}(),s=function(){function e(){this.alphabet=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],this.endTemplate=document.querySelector('[data-id="tpl-end-screen"]').innerHTML,this.soundFail=document.querySelector("#sound-fail"),this.soundSuccess=document.querySelector("#sound-success"),this.soundHighScore=document.querySelector("#sound-high-score"),this.init()}return e.prototype.init=function(){var e=this,n=document.querySelector("#current-letter");this.soundToggle=document.querySelector("#toggle-sound"),this.scores=new i(document.querySelector("#scores")),this.scores.render(),this.timer=document.querySelector("#timer"),this.letter=n,this.timer.click(),document.addEventListener("keydown",(function(n){" "===n.key.toUpperCase()&&(e.timer.parentElement.classList.add("--is-visible"),e.removeEndScreen(),e.reset())})),this.isMuted()&&this.mute(),this.soundToggle.addEventListener("click",(function(){e.toggleSound()})),this.start()},e.prototype.mute=function(){this.soundToggle.firstChild.textContent="volume_up",this.soundFail.volume=0,this.soundSuccess.volume=0,this.soundHighScore.volume=0,localStorage.setItem("is_muted","true")},e.prototype.unMute=function(){this.soundToggle.firstChild.textContent="volume_off",this.soundFail.volume=1,this.soundSuccess.volume=1,this.soundHighScore.volume=1,localStorage.setItem("is_muted","false")},e.prototype.reset=function(){clearInterval(this.intervalId),this.letter.parentElement.classList.remove("--is-wrong"),this.index=0,this.letter.innerText=this.alphabet[this.index],this.letter.classList.add("cta"),this.timer.innerText="Start by hitting"},e.prototype.start=function(){var e=this;document.addEventListener("keydown",(function(n){var t=n.key.toUpperCase();"A"===t&&0===e.index?(e.letter.classList.remove("cta"),e.startTimer(),e.advance()):t===e.alphabet[e.index]?e.advance():e.index>0&&e.fail()}))},e.prototype.advance=function(){var e=this;this.playSound("success"),this.letter.parentElement.classList.remove("--is-wrong");var n=1,t=setInterval((function(){n<1.8?n+=.05:(n=1,clearInterval(t)),e.letter.parentElement.style.transform="scale("+n+")"}),5);this.index++,this.alphabet[this.index]?(this.letter.innerText=this.alphabet[this.index],this.letter.parentElement.style.removeProperty("transform")):this.finish()},e.prototype.fail=function(){this.playSound("fail"),this.letter.parentElement.classList.add("--is-wrong")},e.prototype.startTimer=function(){var e=this;this.startTime=Date.now();var n=0;this.intervalId=setInterval((function(){n+=10,e.timer.innerText=String((n/1e3).toFixed(2))}),10)},e.prototype.finish=function(){clearInterval(this.intervalId);var e=Date.now()-this.startTime,n=i.createScore(e);this.scores.saveScore(n),this.reset(),this.scores.render(),this.displayEndScreen(n)},e.prototype.displayEndScreen=function(e){var n=this.scores.getHighScore(),t=e.actualTime<=n.actualTime,o={time:e.score,greeting:t?"NEW HIGH SCORE!":e.actualTime-n.actualTime<500?"Ah, so close...":"Not good enough...",isHighScore:t},i=document.createElement("div");i.classList.add("dialog"),i.innerHTML=r.render(this.endTemplate,o),document.body.appendChild(i),t&&this.playSound("high-score")},e.prototype.removeEndScreen=function(){var e=document.querySelector(".dialog");e&&e.parentElement.removeChild(e)},e.prototype.playSound=function(e,n){var t;switch(e){case"success":t=this.soundSuccess;break;case"fail":t=this.soundFail;break;case"high-score":t=this.soundHighScore}if(!0===n)return t.play();t.play().then((function(){t.currentTime=0}))},e.prototype.isMuted=function(){return"true"===localStorage.getItem("is_muted")},e.prototype.toggleSound=function(){!1===this.isMuted()?this.mute():this.unMute()},e}();t(5);document.addEventListener("DOMContentLoaded",(function(){new s}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,