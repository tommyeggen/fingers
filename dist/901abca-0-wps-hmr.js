webpackHotUpdate(0,{14:function(t,e,i){"use strict";i.r(e);var s=function(){function t(){this.scores=this.getSavedScores()}return t.prototype.saveScore=function(t){var e=this.getSavedScores()||[];e.push(t),localStorage.setItem("scores",JSON.stringify(e))},t.prototype.getSavedScores=function(){return this.scores=JSON.parse(localStorage.getItem("scores")),this.scores?this.scores:[]},t.prototype.render=function(){this.scores},t.prototype.clear=function(){localStorage.clear()},t}(),r=function(){function t(){this.results=[],this.started=!1,this.alphabet=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],this.init()}return t.prototype.init=function(){var t=this,e=document.querySelector("#current-letter");this.scores=new s,this.scores.render(),this.timer=document.querySelector("#timer"),this.letter=e,this.timer.click(),document.addEventListener("keydown",(function(e){" "===e.key.toUpperCase()&&(t.timer.parentElement.classList.add("--is-visible"),t.reset())})),this.start()},t.prototype.reset=function(){clearInterval(this.intervalId),this.letter.parentElement.classList.remove("--is-wrong"),this.index=0,this.letter.innerText=this.alphabet[this.index],this.timer.innerText="0.00"},t.prototype.start=function(){var t=this;document.addEventListener("keydown",(function(e){var i=e.key.toUpperCase();"A"===i&&0===t.index?(t.startTimer(),t.advance()):i===t.alphabet[t.index]?t.advance():t.index>0&&t.fail()}))},t.prototype.advance=function(){this.letter.parentElement.classList.remove("--is-wrong"),this.index++,this.alphabet[this.index]?this.letter.innerText=this.alphabet[this.index]:(this.saveTime(this.timer.innerText),this.finish())},t.prototype.fail=function(){this.letter.parentElement.classList.add("--is-wrong")},t.prototype.startTimer=function(){var t=this,e=0;this.intervalId=setInterval((function(){e+=10,t.timer.innerText=(e/1e3).toFixed(3)}),10)},t.prototype.saveTime=function(t){this.time=t,this.results.push(t)},t.prototype.finish=function(){var t=new Date,e={timestamp:t.getMilliseconds(),date:t.getDay()+". "+t.getMonth()+" - "+t.getFullYear(),score:this.time};this.scores.saveScore(e),this.scores.render(),this.reset()},t}();i(4);document.addEventListener("DOMContentLoaded",(function(){new r}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,