webpackHotUpdate(0,{15:function(e,t,r){"use strict";r.r(t);var n=r(1),i=Intl.DateTimeFormat,s=function(){function e(e){this.container=e,this.scores=this.getSavedScores(),this.template=document.querySelector('[data-id="tpl-scores"]').innerHTML}return e.prototype.saveScore=function(e){var t;(t=(t=this.getSavedScores()?this.getSavedScores():[]).sort((function(e,t){return e.actualTime>t.actualTime}))).length>3?t[t.length-1]=e:t.push(e),localStorage.setItem("scores",JSON.stringify(t)),this.scores=t},e.prototype.getSavedScores=function(){return JSON.parse(localStorage.getItem("scores"))},e.prototype.render=function(){var e=this.scores;e&&e.length>=1&&e.sort((function(e,t){return e.actualTime>t.actualTime}));var t={scores:e,highScore:this.getHighScore()};this.container.innerHTML=n.render(this.template,t),this.setup()},e.prototype.setup=function(){var e=this;this.container.querySelector("#clear-scores").addEventListener("click",(function(){e.clear()}))},e.prototype.getHighScore=function(){var e=this.scores;return e&&e.length>=1?(e.sort((function(e,t){return e.actualTime>t.actualTime})),e[0]):{}},e.prototype.clear=function(){this.scores=[],localStorage.clear(),this.render()},e.createScore=function(e){var t=new Date,r=new i;return{timestamp:Date.now(),date:r.format(t),score:(e/1e3).toFixed(3),actualTime:e}},e}(),o=function(){function e(){this.alphabet=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],this.init(),this.endTemplate=document.querySelector('[data-id="tpl-end-screen"]').innerHTML}return e.prototype.init=function(){var e=this,t=document.querySelector("#current-letter");this.scores=new s(document.querySelector("#scores")),this.scores.render(),this.timer=document.querySelector("#timer"),this.letter=t,this.timer.click(),document.addEventListener("keydown",(function(t){" "===t.key.toUpperCase()&&(e.timer.parentElement.classList.add("--is-visible"),e.removeEndScreen(),e.reset())})),this.start()},e.prototype.reset=function(){clearInterval(this.intervalId),this.letter.parentElement.classList.remove("--is-wrong"),this.index=0,this.letter.innerText=this.alphabet[this.index],this.letter.classList.add("cta"),this.timer.innerText="Start by hitting"},e.prototype.start=function(){var e=this;document.addEventListener("keydown",(function(t){var r=t.key.toUpperCase();"A"===r&&0===e.index?(e.letter.classList.remove("cta"),e.startTimer(),e.advance()):r===e.alphabet[e.index]?e.advance():e.index>0&&e.fail()}))},e.prototype.advance=function(){var e=this;this.letter.parentElement.classList.remove("--is-wrong");var t=1,r=setInterval((function(){t<1.8?t+=.05:(t=1,clearInterval(r)),e.letter.parentElement.style.transform="scale("+t+")"}),5);this.index++,this.alphabet[this.index]?(this.letter.innerText=this.alphabet[this.index],this.letter.parentElement.style.removeProperty("transform")):this.finish()},e.prototype.fail=function(){this.letter.parentElement.classList.add("--is-wrong")},e.prototype.startTimer=function(){var e=this;this.startTime=Date.now();var t=0;this.intervalId=setInterval((function(){t+=10,e.timer.innerText=String((t/1e3).toFixed(2))}),10)},e.prototype.finish=function(){clearInterval(this.intervalId);var e=Date.now()-this.startTime,t=s.createScore(e);this.scores.saveScore(t),this.reset(),this.scores.render(),this.displayEndScreen(t)},e.prototype.displayEndScreen=function(e){var t=this.scores.getHighScore(),r=e.actualTime<=t.actualTime,i={time:e.score,greeting:r?"NEW HIGH SCORE!":e.actualTime-t.actualTime<500?"Ah, so close...":"Not good enough...",isHighScore:r},s=document.createElement("div");s.classList.add("dialog"),s.innerHTML=n.render(this.endTemplate,i),document.body.appendChild(s)},e.prototype.removeEndScreen=function(){var e=document.querySelector(".dialog");e&&e.parentElement.removeChild(e)},e}();r(5);document.addEventListener("DOMContentLoaded",(function(){new o}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,